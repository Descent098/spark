{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for spark. Spark is a library developed by Schulich Ignite to help students draw in python. The basics Below is everything you need to get started with spark. If you are looking for something specific there is a search bar in the top right and a list of available documentation on the left, and at the bottom of this page. Also note that you can copy any code listed on this site by clicking on the clipboard icon in the top right of the code block. Logging in and Slides To use spark simply login to the Schulich Ignite server here , you will need a gmail account (an email with @gmail.com). Slides for each class are available on the main website . Interface Please keep in mind the Schulich Ignite server is based on Jupyter Notebooks , and may look different to other versions of python you have seen. Toolbars There are two toolbars Toolbar 1 Primarily for creating new notebooks, changing settings, and exporting notebooks Toolbar 2 Used to run cells, and other tasks within the current notebook Play buttons Also note that there are two \"play\" options: The first is to run the current cell (can also be done with shift + enter). The second runs all cells in the notebook Cells Cells are the little grey rectangles that appear under the second toolbar. You will write your code inside of them. Each cell can be run independently, and notebooks can have an unlimited (mostly) number of cells. Cell numbers Also keep in mind the number to the left of the text input (grey rectangle) is the cell number, that tells you which cells were last used. Collapsing cells You can also collapse a cell, or it's output by hitting the blue rectangle on the left of the cell. For example this is what it looks like before: And what it looks like after hitting the rectangle: Running cells To run cells you can either click the play button on toolbar 2 , or hit shift + enter on your keyboard Setting up a notebook Once you are logged in you can create a notebook by going to File --> New --> Notebook : You will then need to just hit Select on the pre-selected kernal that shows up: Boilerplate At the start of each notebook you will need to include the following lines in the first cell, and run it before writing any other code: !pip install --upgrade schulich-ignite import spark %reload_ext spark Your notebook should look like this: Roughly speaking all this code does, is download the latest version of spark and then bring it into the notebook so we can use it. Setting up a cell At the start of each cell (except the first) you need to have at least the following two lines if your code only needs to draw things once: %%ignite def setup(): size(200, 200) # You can change 200, 200 to any integers You can also use the draw() function, which will execute the code constantly that is inside it. This makes it ideal for things like animation, and any code that will update itself over time. Most of the time this will be the setup you want : %%ignite def setup(): size(200, 200) # You can change 200, 200 to any integers def draw(): # loops everything in here forever and draws stuff Other documentation Colors - Any functions related to coloring shapes, text, or background Input - Any functions related to taking user input, such as mouse position or keyboard input Shapes & Text - Any functions related to creating shapes and/or text Utilities - Any other useful functions that do not fit the above categories","title":"Getting Started"},{"location":"#the-basics","text":"Below is everything you need to get started with spark. If you are looking for something specific there is a search bar in the top right and a list of available documentation on the left, and at the bottom of this page. Also note that you can copy any code listed on this site by clicking on the clipboard icon in the top right of the code block.","title":"The basics"},{"location":"#logging-in-and-slides","text":"To use spark simply login to the Schulich Ignite server here , you will need a gmail account (an email with @gmail.com). Slides for each class are available on the main website .","title":"Logging in and Slides"},{"location":"#interface","text":"Please keep in mind the Schulich Ignite server is based on Jupyter Notebooks , and may look different to other versions of python you have seen.","title":"Interface"},{"location":"#toolbars","text":"There are two toolbars","title":"Toolbars"},{"location":"#toolbar-1","text":"Primarily for creating new notebooks, changing settings, and exporting notebooks","title":"Toolbar 1"},{"location":"#toolbar-2","text":"Used to run cells, and other tasks within the current notebook","title":"Toolbar 2"},{"location":"#play-buttons","text":"Also note that there are two \"play\" options: The first is to run the current cell (can also be done with shift + enter). The second runs all cells in the notebook","title":"Play buttons"},{"location":"#cells","text":"Cells are the little grey rectangles that appear under the second toolbar. You will write your code inside of them. Each cell can be run independently, and notebooks can have an unlimited (mostly) number of cells.","title":"Cells"},{"location":"#cell-numbers","text":"Also keep in mind the number to the left of the text input (grey rectangle) is the cell number, that tells you which cells were last used.","title":"Cell numbers"},{"location":"#collapsing-cells","text":"You can also collapse a cell, or it's output by hitting the blue rectangle on the left of the cell. For example this is what it looks like before: And what it looks like after hitting the rectangle:","title":"Collapsing cells"},{"location":"#running-cells","text":"To run cells you can either click the play button on toolbar 2 , or hit shift + enter on your keyboard","title":"Running cells"},{"location":"#setting-up-a-notebook","text":"Once you are logged in you can create a notebook by going to File --> New --> Notebook : You will then need to just hit Select on the pre-selected kernal that shows up:","title":"Setting up a notebook"},{"location":"#boilerplate","text":"At the start of each notebook you will need to include the following lines in the first cell, and run it before writing any other code: !pip install --upgrade schulich-ignite import spark %reload_ext spark Your notebook should look like this: Roughly speaking all this code does, is download the latest version of spark and then bring it into the notebook so we can use it.","title":"Boilerplate"},{"location":"#setting-up-a-cell","text":"At the start of each cell (except the first) you need to have at least the following two lines if your code only needs to draw things once: %%ignite def setup(): size(200, 200) # You can change 200, 200 to any integers You can also use the draw() function, which will execute the code constantly that is inside it. This makes it ideal for things like animation, and any code that will update itself over time. Most of the time this will be the setup you want : %%ignite def setup(): size(200, 200) # You can change 200, 200 to any integers def draw(): # loops everything in here forever and draws stuff","title":"Setting up a cell"},{"location":"#other-documentation","text":"Colors - Any functions related to coloring shapes, text, or background Input - Any functions related to taking user input, such as mouse position or keyboard input Shapes & Text - Any functions related to creating shapes and/or text Utilities - Any other useful functions that do not fit the above categories","title":"Other documentation"},{"location":"color/","text":"Below is a list of all of the information about colors within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Creating a background There are two ways to use background, with a single string, or 3 integers. String background background(color) Parameters color: (str) The name of the color to use Example(s): Creating a green background %%ignite def setup(): size(200, 200) def draw(): background(\"Green\") Results in: Integer background background(r, g, b) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Creating a green background %%ignite def setup(): size(200, 200) def draw(): background(0, 255, 0) Results in: Clearing the screen To clear the screen, there are two options: clear() background() clear() clear explicitly just clears the screen to the default background color clear() Example(s): Drawing a green background and a circle, then clearing the screen and drawing just a rectangle %%ignite def setup(): size(200, 200) # Draw stuff before clear background(0, 255, 0) fill_circle(100, 100, 75) # Clear everything on the screen clear() # Only this stuff shows up fill_rect(100, 100, 75, 50) Results in: Changing the color of shapes There are two available options to change the color of shapes you draw. Keep in mind you need to select the color then draw the shape. String version fill_style(color) Parameters color: (str) The name of a color ( full list found here ) i.e. \"blue\" Example(s): Drawing a red, a green, and a blue circle at different points on the canvas %%ignite def setup(): size(200, 200) # Red Circle fill_style(\"red\") fill_circle(50, 50, 50) # Green Circle fill_style(\"green\") fill_circle(100, 100, 50) # Blue Circle fill_style(\"blue\") fill_circle(150, 150, 50) Results in: Integer version fill_style(r, g, b) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Drawing a red, a green, and a blue circle at different points on the canvas %%ignite def setup(): size(200, 200) # Red circle fill_style(255, 0, 0) fill_circle(50, 50, 50) # Green Circle fill_style(0, 255, 0) fill_circle(100, 100, 50) # Blue circle fill_style(0, 0, 255) fill_circle(150, 150, 50) Results in:","title":"Color"},{"location":"color/#creating-a-background","text":"There are two ways to use background, with a single string, or 3 integers.","title":"Creating a background"},{"location":"color/#string-background","text":"background(color) Parameters color: (str) The name of the color to use Example(s): Creating a green background %%ignite def setup(): size(200, 200) def draw(): background(\"Green\") Results in:","title":"String background"},{"location":"color/#integer-background","text":"background(r, g, b) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Creating a green background %%ignite def setup(): size(200, 200) def draw(): background(0, 255, 0) Results in:","title":"Integer background"},{"location":"color/#clearing-the-screen","text":"To clear the screen, there are two options: clear() background()","title":"Clearing the screen"},{"location":"color/#clear","text":"clear explicitly just clears the screen to the default background color clear() Example(s): Drawing a green background and a circle, then clearing the screen and drawing just a rectangle %%ignite def setup(): size(200, 200) # Draw stuff before clear background(0, 255, 0) fill_circle(100, 100, 75) # Clear everything on the screen clear() # Only this stuff shows up fill_rect(100, 100, 75, 50) Results in:","title":"clear()"},{"location":"color/#changing-the-color-of-shapes","text":"There are two available options to change the color of shapes you draw. Keep in mind you need to select the color then draw the shape.","title":"Changing the color of shapes"},{"location":"color/#string-version","text":"fill_style(color) Parameters color: (str) The name of a color ( full list found here ) i.e. \"blue\" Example(s): Drawing a red, a green, and a blue circle at different points on the canvas %%ignite def setup(): size(200, 200) # Red Circle fill_style(\"red\") fill_circle(50, 50, 50) # Green Circle fill_style(\"green\") fill_circle(100, 100, 50) # Blue Circle fill_style(\"blue\") fill_circle(150, 150, 50) Results in:","title":"String version"},{"location":"color/#integer-version","text":"fill_style(r, g, b) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Drawing a red, a green, and a blue circle at different points on the canvas %%ignite def setup(): size(200, 200) # Red circle fill_style(255, 0, 0) fill_circle(50, 50, 50) # Green Circle fill_style(0, 255, 0) fill_circle(100, 100, 50) # Blue circle fill_style(0, 0, 255) fill_circle(150, 150, 50) Results in:","title":"Integer version"},{"location":"input/","text":"Below you will find a list of all information necessary to take user input within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Mouse position To get the current mouse position you can use the following variables: mouse_x: (int) The value of the x position of the mouse mouse_y: (int) The value of the y position of the mouse Example(s): Drawing a circle at the mouse position constantly (remember it will draw over itself over and over again and leave a trail): %%ignite def setup(): size(200, 200) def draw(): fill_circle(mouse_x, mouse_y, 25) Results in: Mouse pressed To find out if the mouse has been pressed you can use the variable: mouse_is_pressed: (bool) True if the mouse has been pressed, otherwise False Example(s): Rectangle will be red if the mouse has been pressed, otherwise it will be blue %%ignite def setup(): size(200, 200) def draw(): if mouse_is_pressed: fill_style(\"red\") else: fill_style(\"blue\") fill_rect(mouse_x, mouse_y, 20, 20) Results in: Getting text from user To ask the user for an answer to a question you can use: input(message) Keep in mind, whatever the user types in will always be a string. See the second example for how to convert to other types. Parameters message: (str) The text you want to show the user when asking for input Example(s): Ask the user for their name, then display it to the screen: %%ignite def setup(): # Only drawn once, so just using setup() size(200, 200) name = input(\"What is your name?: \") text(name, 100, 100) which results in: Ask the user for a radius. We need to convert the string to an integer, we can do this using int(). Draw a circle of that radius at (100, 100): %%ignite def setup(): # Only drawn once, so just using setup() size(200, 200) radius = int(input(\"What radius should the circle be?: \")) # cast the string to an integer fill_circle(100, 100 radius) which results in:","title":"Input"},{"location":"input/#mouse-position","text":"To get the current mouse position you can use the following variables: mouse_x: (int) The value of the x position of the mouse mouse_y: (int) The value of the y position of the mouse Example(s): Drawing a circle at the mouse position constantly (remember it will draw over itself over and over again and leave a trail): %%ignite def setup(): size(200, 200) def draw(): fill_circle(mouse_x, mouse_y, 25) Results in:","title":"Mouse position"},{"location":"input/#mouse-pressed","text":"To find out if the mouse has been pressed you can use the variable: mouse_is_pressed: (bool) True if the mouse has been pressed, otherwise False Example(s): Rectangle will be red if the mouse has been pressed, otherwise it will be blue %%ignite def setup(): size(200, 200) def draw(): if mouse_is_pressed: fill_style(\"red\") else: fill_style(\"blue\") fill_rect(mouse_x, mouse_y, 20, 20) Results in:","title":"Mouse pressed"},{"location":"input/#getting-text-from-user","text":"To ask the user for an answer to a question you can use: input(message) Keep in mind, whatever the user types in will always be a string. See the second example for how to convert to other types. Parameters message: (str) The text you want to show the user when asking for input Example(s): Ask the user for their name, then display it to the screen: %%ignite def setup(): # Only drawn once, so just using setup() size(200, 200) name = input(\"What is your name?: \") text(name, 100, 100) which results in: Ask the user for a radius. We need to convert the string to an integer, we can do this using int(). Draw a circle of that radius at (100, 100): %%ignite def setup(): # Only drawn once, so just using setup() size(200, 200) radius = int(input(\"What radius should the circle be?: \")) # cast the string to an integer fill_circle(100, 100 radius) which results in:","title":"Getting text from user"},{"location":"shapes_text/","text":"Below is a list of all of the shapes, and text available for drawing within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Rectangle To create a rectangle use: fill_rect(x, y, w, l) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a rectangle at (100, 100) with a width of 75, and length of 50 %%ignite def setup(): size(200, 200) def draw(): fill_rect(100, 100, 75, 50) Results in: Circle To create a circle use: fill_circle(x, y, r) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle r: (int or float) The radius of the circle Example(s): Creating a circle at (100, 100) with a radius of 75 %%ignite def setup(): size(200, 200) def draw(): fill_circle(100, 100, 75) Results in: Text To create text in your drawing use: text(message, x, y) Parameters message: (str) The text you want to draw x: (int or float) The value of the x position of the text y: (int or float) The value of the y position of the text Example(s): Creating some text at (100, 100) %%ignite def setup(): size(200, 200) def draw(): text(\"Hello World!\", 100, 100) Results in: Change text size To change the size of your text use: text_size(s) Parameters s: (int or float) The size you want to make your text Example(s): Creating some text at (100, 100), that is 16pt font %%ignite def setup(): size(200, 200) def draw(): text_size(16) text(\"Hello World!\", 100, 100) Results in:","title":"Shapes & Text"},{"location":"shapes_text/#rectangle","text":"To create a rectangle use: fill_rect(x, y, w, l) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a rectangle at (100, 100) with a width of 75, and length of 50 %%ignite def setup(): size(200, 200) def draw(): fill_rect(100, 100, 75, 50) Results in:","title":"Rectangle"},{"location":"shapes_text/#circle","text":"To create a circle use: fill_circle(x, y, r) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle r: (int or float) The radius of the circle Example(s): Creating a circle at (100, 100) with a radius of 75 %%ignite def setup(): size(200, 200) def draw(): fill_circle(100, 100, 75) Results in:","title":"Circle"},{"location":"shapes_text/#text","text":"To create text in your drawing use: text(message, x, y) Parameters message: (str) The text you want to draw x: (int or float) The value of the x position of the text y: (int or float) The value of the y position of the text Example(s): Creating some text at (100, 100) %%ignite def setup(): size(200, 200) def draw(): text(\"Hello World!\", 100, 100) Results in:","title":"Text"},{"location":"shapes_text/#change-text-size","text":"To change the size of your text use: text_size(s) Parameters s: (int or float) The size you want to make your text Example(s): Creating some text at (100, 100), that is 16pt font %%ignite def setup(): size(200, 200) def draw(): text_size(16) text(\"Hello World!\", 100, 100) Results in:","title":"Change text size"},{"location":"utilities/","text":"Below is a list of all of some other helpful functions available within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Create a random float between 0 and 1 To generate a random float between 0 and 1 use: random() Example(s): Printing a random value between 0-1 %%ignite def setup(): size(200, 200) print(random()) Results in: Create a random int To generate a random integer between 0 and n (inclusive) use: randint(n) Parameters n: (int) The highest value in the range Example(s): Printing a random value between 0-10 %%ignite def setup(): size(200, 200) print(randint(10)) Results in:","title":"Utilities"},{"location":"utilities/#create-a-random-float-between-0-and-1","text":"To generate a random float between 0 and 1 use: random() Example(s): Printing a random value between 0-1 %%ignite def setup(): size(200, 200) print(random()) Results in:","title":"Create a random float between 0 and 1"},{"location":"utilities/#create-a-random-int","text":"To generate a random integer between 0 and n (inclusive) use: randint(n) Parameters n: (int) The highest value in the range Example(s): Printing a random value between 0-10 %%ignite def setup(): size(200, 200) print(randint(10)) Results in:","title":"Create a random int"}]}